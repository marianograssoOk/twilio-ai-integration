AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Chatbot Serverless Project

Resources:
  ApiGatewayAccountRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayAccountRole.Arn

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      MethodSettings:
        - LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true
          ResourcePath: "/*"
          HttpMethod: "*"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: "{\"requestId\":\"$context.requestId\",\"ip\":\"$context.identity.sourceIp\",\"requestTime\":\"$context.requestTime\",\"httpMethod\":\"$context.httpMethod\",\"routeKey\":\"$context.routeKey\",\"status\":\"$context.status\",\"protocol\":\"$context.protocol\",\"responseLength\":\"$context.responseLength\"}"

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ApiGateway}"
      RetentionInDays: 14

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/ChatbotServerless/
      Handler: ChatbotServerless::ChatbotServerless.Function::FunctionHandler
      Runtime: dotnet8
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket
          KENDRA_INDEX_ID: !Ref KendraIndex
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /message
            Method: post

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
              - Effect: Allow
                Action:
                  - "bedrock:*"
                  - "kendra:Query"
                  - "kendra:Retrieve"
                Resource:
                  - !GetAtt KendraIndex.Arn
                  - "*"
              - Effect: Allow
                Action:
                  - "execute-api:Invoke"
                Resource: "*"
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action: "ssm:GetParameter"
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/OPENAI_API_KEY"

  S3Bucket:
    Type: AWS::S3::Bucket

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: UserInformation
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  KendraIndex:
    Type: AWS::Kendra::Index
    Properties:
      Name: nutricion-index
      Edition: ENTERPRISE_EDITION
      Description: "Índice de documentos de nutrición y dietas para chatbot de asesoramiento nutricional"
      RoleArn: !GetAtt KendraIndexRole.Arn

  KendraIndexRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: kendra.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: KendraIndexPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "${S3Bucket.Arn}"
                  - !Sub "${S3Bucket.Arn}/*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
                Condition:
                  StringEquals:
                    cloudwatch:namespace: AWS/Kendra

  KendraS3DataSource:
    Type: AWS::Kendra::DataSource
    Properties:
      IndexId: !Ref KendraIndex
      Name: NutricionDocumentos
      Type: S3
      DataSourceConfiguration:
        S3Configuration:
          BucketName: !Ref S3Bucket
          InclusionPrefixes:
            - documentos/nutricion/
      RoleArn: !GetAtt KendraIndexRole.Arn
  # Removed DependsOn: KendraIndex



Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL for Prod environment"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/message"
